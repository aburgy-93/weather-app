{"mappings":"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","sources":["script.js"],"sourcesContent":["(\"use strict\");\n\nconst textArea = document.querySelector(\"#textarea\");\nconst btnSubmit = document.querySelector(\".btn-submit\");\nconst weatherDiv = document.querySelector(\".weather-div\");\nconst weatherInfo = document.querySelector(\".weaither-info\");\nconst weatherIcon = document.querySelector(\".weather-icon\");\nconst weatherDetails = document.querySelector(\".details\");\nconst forecastContainer = document.querySelector(\".forecast-container\");\n\nconst state = {\n  query: \"\",\n  location: {},\n  current: {},\n  condition: {},\n  forecastResults: [],\n};\n\nconst renderError = function (msg) {\n  const markup = `\n    <div class=\"error\">\n    <p>ERROR</p>\n      <div>\n        <ion-icon name=\"accessibility-outline\"></ion-icon>\n      </div>\n    </div>\n  `;\n  weatherDiv.innerHTML = \"\";\n  weatherDiv.insertAdjacentHTML(\"beforebegin\", markup);\n};\n\nconst getWeatherData = async function (local) {\n  try {\n    if (!local) return;\n    state.query = local;\n    const response = await fetch(\n      // `http://api.weatherapi.com/v1/forecast.json?key=0d3f35d4d5b94baba11203207230604&q&q=${local}&days=3&aqi=no&alerts=no`\n      `http://api.weatherapi.com/v1/forecast.json?key=0d3f35d4d5b94baba11203207230604&q&q=&days=3&aqi=no&alerts=no`\n    );\n    const data = await response.json();\n\n    const { current } = data;\n    const { condition } = data.current;\n    const { forecastday } = data.forecast;\n    const { location } = data;\n\n    state.current = {\n      currTempF: current.feelslike_f,\n      currWeather: current.condition.text,\n      humidity: current.humidity,\n      windSpeed: current.wind_mph,\n    };\n\n    state.condition = {\n      conditionIcon: condition.icon,\n    };\n\n    state.location = {\n      name: location.name,\n      region: location.region,\n    };\n\n    createForcastObject(forecastday);\n\n    const markup = `\n      <div class=\"weaither-info\">\n        <img src=\"${state.condition.conditionIcon}\" class=\"weather-icon\">\n        <h1 class=\"location-heading\">${state.location.name}, ${state.location.region}</h1>\n        <h2 class=\"weather-description\">${state.current.currWeather}</h2>\n        <h2 class=\"temp\">${state.current.currTempF}<span>&#8457;</span></h2>\n      </div>\n    `;\n    weatherInfo.textContent = \"\";\n    weatherInfo.insertAdjacentHTML(\"afterbegin\", markup);\n\n    const detailsMarkup = `\n        <div class=\"col left\">\n        <img src=\"/humidity.5ee5b96c.png\" alt=\"\">\n        <div class=\"condition-div\">\n          <div class=\"condition percent\">\n            <p class=\"humidity\">${state.current.humidity}%</p>\n          </div>\n          <p>Humidity</p>\n        </div>\n      </div>\n      <div class=\"col\">\n        <img src=\"/wind.b8bb298f.png\" alt=\"\">\n        <div class=\"condition-div\">\n          <div class=\"condition speed\">\n            <p class=\"wind\">${state.current.windSpeed}</p><span>mph</span>\n          </div>\n          <p class=\"wind-speed\">Wind Speed</p>\n        </div>\n      </div>\n    `;\n    weatherDetails.textContent = \"\";\n    weatherDetails.insertAdjacentHTML(\"afterbegin\", detailsMarkup);\n    loadDailyForecast();\n  } catch (err) {\n    // throw new Error(renderError(err));\n    // throw renderError(err);\n    renderError(err);\n  }\n};\n\nconst createForcastObject = function (data) {\n  state.forecastResults = data.map((data) => {\n    const forecastDates = new Date(data.date);\n    forecastDates.setDate(forecastDates.getDate() + 1);\n    const dateFormat = {\n      weekday: \"short\",\n    };\n\n    return {\n      hightemp_f: data.day.maxtemp_f,\n      lowtemp_f: data.day.mintemp_f,\n      dayText: data.day.condition.text,\n      dayIcon: data.day.condition.icon,\n      date: forecastDates.toLocaleDateString(\"en-GB\", dateFormat),\n    };\n  });\n};\n\nconst loadDailyForecast = async function () {\n  try {\n    const data = state.forecastResults;\n    if (!data) return;\n    const markup = data\n      .map((day) => {\n        return `\n            <div class=\"day day-\">\n              <p>${day.date}</p>\n              <img src=\"${day.dayIcon}\" alt=\"\">\n              <p>${Math.trunc(day.hightemp_f)}<span>&#8457;</span></p>\n              <p>${Math.trunc(day.lowtemp_f)}<span>&#8457;</span></p>\n            </div>\n          `;\n      })\n      .join(\"\");\n\n    forecastContainer.textContent = \"\";\n    forecastContainer.insertAdjacentHTML(\"afterbegin\", markup);\n  } catch (err) {\n    console.log(err);\n    throw new Error(`Country not found (${err.message})`);\n  }\n};\n\nconst formSubmit = function () {\n  const textValue = textArea.value;\n  if (!textValue) return;\n  getWeatherData(textValue);\n};\n\nbtnSubmit.addEventListener(\"click\", function (e) {\n  e.preventDefault();\n  formSubmit();\n  weatherDiv.style.display = \"block\";\n  textArea.value = \"\";\n});\n"],"names":[],"version":3,"file":"index.672d4772.js.map","sourceRoot":"/__parcel_source_root/"}